<!DOCTYPE html>
<html data-bs-theme="light" lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    <title>blockchain</title>
    <link rel="stylesheet" href="/assets/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/css/bs-theme-overrides.css">
    <link rel="stylesheet" href="/assets/css/Banner-Heading-Image-images.css">
    <link rel="stylesheet" href="/assets/css/Navbar-Right-Links-icons.css">
</head>

<body>
    <%- include partials/header.ejs %>
    <div>
        <div class="container" style="margin-top:2%; display: flex; justify-content: center;"><img alt="green fields" src="<%= details.image %>" style="width: 700px;border-radius: 5%; box-shadow: 10px 10px rgb(179, 182, 183);" /></div></div>
    <div>
        <div class="row">
            <div class="col">
                <div class="container py-4 py-xl-5">
                    <div class="row mb-5">
                        <div class="col-md-8 col-xl-6 text-center mx-auto">
                            <h2><%= details.place %></h2>
                            <p class="w-lg-50"><%= details.description %></p>
                        </div>
                    </div>
                    <div class="row gy-4 row-cols-1 row-cols-md-2 row-cols-xl-3">
                        <div class="col-md-12">
                            <div class="p-4">
                                <p><%= details.description2 %><br><br></p>
                                <div class="d-flex"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row d-flex justify-content-center">
                      <div class="col-md-6 col-lg-5 col-xl-4">
                          <div>
                              <div class="card" style="width: 18rem;">
                                <div class="card-body">
                                  <form class="p-3 p-xl-4" method="post" role="form" id="submitForm">
                                    <div class="mb-3">
                                        <input class="form-control" type="text" id="name" name="name" placeholder="Your Name"><br>
                                        <input class="form-control" type="email" id="email" name="email" placeholder="Your Email"><br>
                                        <input class="form-control" type="number" id="count" name="count" placeholder="Total members for the trip"><br>
                                        <input class="form-control" type="text" id="refer" name="refer" placeholder="(Optional) Referal Code"><br>
                                    </div>
                                    <div>
                                      <button class="btn btn-primary" type="submit">Proceed to payment</button>
                                    </div>
                                </form>
                                </div>
                              </div>
                          </div>
                      </div>
                  </div>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/bootstrap/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    <script>
      // Initialize Web3
      if (typeof web3 !== 'undefined') {
        web3 = new Web3(web3.currentProvider);
      } else {
        web3 = new Web3(new Web3.providers.HttpProvider('HTTP://127.0.0.1:7545'));
      }

      var ABI = [
	{
		"inputs": [],
		"name": "deposit",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "email",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "count_t",
				"type": "uint256"
			},
			{
				"internalType": "address payable",
				"name": "referal",
				"type": "address"
			}
		],
		"name": "process",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address payable",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "transferAmount",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "admin",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "count",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "message_index",
				"type": "uint256"
			}
		],
		"name": "getMessage",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "messages",
		"outputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "email",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "count_t",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "referal",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "recipient",
		"outputs": [
			{
				"internalType": "address payable",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "referaladdress",
		"outputs": [
			{
				"internalType": "contract Refer",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "tokenAddress1",
		"outputs": [
			{
				"internalType": "contract myToken",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]; 
      var Address = '0x071b0cca6c3c86189129ea4a26371769542356ff'; // Add Your Contract address here!!!
      window.web3 = new Web3(window.ethereum);
      window.contract = new window.web3.eth.Contract(ABI, Address);

      //Blockchair API
        fetch('https://api.blockchair.com/ethereum/stats')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      ethereum_value=data['data']['market_price_usd'];
      console.log(ethereum_value)
    })
    .catch(error => {
      console.error('There was a problem with the fetch operation:', error);
    });

    document.getElementById("submitForm").addEventListener("submit", async function(event) {
            event.preventDefault();
            var name = document.getElementById("name").value;
            var email = document.getElementById("email").value;
            var count = document.getElementById("count").value;
            var refer = document.getElementById("refer").value;

            // account_full contains the metamask id of the user
            var sender = localStorage.getItem('account_full');

            var amount = '100000000000000000';

          // send the data to the smart contract
          await window.contract.methods.process(amount,name, email, count,refer).send({ from: sender, value: amount });

          alert("Congratulation. Your Transaction is successfull");

        });

      
      // async function depositContract() {
      //   console.log("Hii")
      //   var amount = '100000000000000000';

      //   // account_full contains the metamask id of the user
      //   var sender = localStorage.getItem('account_full');

      //   // send the data to the smart contract
      //   // await window.contract.methods.deposit().send({from: sender, value: amount});
      //   // await window.contract.methods.transferAmount(amount).send({from: sender});
      //   await window.contract.methods.process(amount).send({ from: sender, value: amount });


      //   window.location.href = "/about";
      // }
    </script>
</body>

</html>